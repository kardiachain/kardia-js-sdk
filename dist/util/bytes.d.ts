declare const random: (bytes: number) => string;
declare const length: (a: string | any[]) => number;
declare const flatten: (a: any[]) => string;
declare const slice: (i: number, j: number, bs: string) => string;
declare const reverse: (hex: string) => string;
declare const pad: (l: number, hex: string) => string;
declare const padRight: (l: number, hex: string) => string;
declare const toArray: (hex: string) => number[];
declare const fromArray: (arr: any[]) => string;
declare const toUint8Array: (hex: string) => Uint8Array;
declare const fromUint8Array: (arr: any) => string;
declare const fromNumber: (num: number) => string;
declare const toNumber: (hex: string) => number;
declare const concat: (a: string, b: string) => string;
declare const fromNat: (bn: any) => any;
declare const toNat: (bn: string) => string;
declare const fromAscii: (ascii: string) => string;
declare const toAscii: (hex: string) => string;
declare const fromString: (s: string) => string | null;
declare const toString: (bytes: string) => string | null;
export { random, length, concat, flatten, slice, reverse, pad, padRight, fromAscii, toAscii, fromString, toString, fromNumber, toNumber, fromNat, toNat, fromArray, toArray, fromUint8Array, toUint8Array, };
declare const _default: {
    random: (bytes: number) => string;
    length: (a: string | any[]) => number;
    concat: (a: string, b: string) => string;
    flatten: (a: any[]) => string;
    slice: (i: number, j: number, bs: string) => string;
    reverse: (hex: string) => string;
    pad: (l: number, hex: string) => string;
    padRight: (l: number, hex: string) => string;
    fromAscii: (ascii: string) => string;
    toAscii: (hex: string) => string;
    fromString: (s: string) => string | null;
    toString: (bytes: string) => string | null;
    fromNumber: (num: number) => string;
    toNumber: (hex: string) => number;
    fromNat: (bn: any) => any;
    toNat: (bn: string) => string;
    fromArray: (arr: any[]) => string;
    toArray: (hex: string) => number[];
    fromUint8Array: (arr: any) => string;
    toUint8Array: (hex: string) => Uint8Array;
};
export default _default;
